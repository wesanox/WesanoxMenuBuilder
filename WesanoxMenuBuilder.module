<?php
namespace ProcessWire;

class WesanoxMenuBuilder extends WireData implements Module
{
public static function getModuleInfo()
    {
        return array(
            'title' => 'wesanox Menu Builder',
            'summary' => 'A little Menu Builder for Processwire.',
            'version' => '0.0.3',
            'author' => 'André Wester',
            'icon' => 'codepen',
            'singular' => true,
            'autoload' => true,
            'installs' => ['CroppableImage3'],
            'requires' => array(
                'ProcessWire>=3.0.210',
                'PHP>=8.0.0',
                'FieldtypeRepeaterMatrix>=0.0.9'
            ),
        );
    }

    protected array $externalModules = [
        'CroppableImage3' => 'https://github.com/horst-n/CroppableImage3/archive/master.zip',
    ];

    protected string $template_options;

    public function __construct()
    {
        /**
         * set the Template Name
         */
        $this->template_options  = 'options_generals';
    }

    /**
     * init function to get save hook for the options-page
     *
     * @return void
     */
    public function init() :void
    {
        wire()->addHookAfter('Pages::saved', $this, 'saveMenuInt');
    }

    /**
     * install function for the modul
     *
     * @return void
     * @throws WireException
     * @throws WirePermissionException
     */
    public function ___install() :void
    {
        /**
         * Install external modules
         */
        foreach ($this->externalModules as $moduleName => $moduleUrl) {
            if (!$this->modules->isInstalled($moduleName)) {
                $message = $this->downloadAndInstallModule($moduleName, $moduleUrl);
                if ($message !== true) $this->error($message);
            }
        }

        /**
         * create the fields for the custom menu
         */
        $this->createFields($this->fields);

        /**
         * if not exists, create settings Page or add new Fields
         * to the settingspage
         */
        if ( !$this->templates->get($this->template_options) ) {
            $fg = new Fieldgroup();
            $fg->name = $this->template_options;
            $fg->add('title');
            $fg->add('tab_menu');
            $fg->add('matrix_menu');
            $fg->add('tab_menu_END');
            $fg->save();

            $op = new Template();
            $op->name = $this->template_options;
            $op->label = 'Einstellungen';
            $op->fieldgroup = $fg;
            $op->icon = 'cogs';
            $op->tags = 'Options';
            $op->noParents = -1;
            $op->save();

            if (!$this->pages->get('template=options_generals')->id) {
                $p = new Page();
                $p->template = 'options_generals';
                $p->parent = $this->pages->get(1);
                $p->title = 'Einstellungen';
                $p->name = 'settings';
                $p->save();
            }
        } else {
            $op = $this->fieldgroups->get($this->template_options);
            $op->add('tab_menu');
            $op->add('matrix_menu');
            $op->add('tab_menu_END');
            $op->save();
        }
    }

    /**
     * uninstall the modul with the fields
     *
     * @return void
     * @throws WireException
     */
    public function ___uninstall(): void
    {
        /**
         * remove fields from option page
         */
        if($this->templates->get($this->template_options)) {
            $op = $this->fieldgroups->get($this->template_options);
            $op->remove('tab_menu');
            $op->remove('matrix_menu');
            $op->remove('tab_menu_END');
            $op->save();
        }

        /**
         * delete fields
         */
        if ($this->fields->get('matrix_menu') && $this->fields->get('matrix_menu')->getFieldgroups()->count == 0) $this->fields->delete($this->fields->get('matrix_menu'));
        if ($this->fields->get('repeater_menu') && $this->fields->get('repeater_menu')->getFieldgroups()->count == 0) $this->fields->delete($this->fields->get('repeater_menu'));

        if ($this->fields->get('int_menu') && $this->fields->get('int_menu')->getFieldgroups()->count == 0) $this->fields->delete($this->fields->get('int_menu'));
        if ($this->fields->get('int_menu_sub') && $this->fields->get('int_menu_sub')->getFieldgroups()->count == 0) $this->fields->delete($this->fields->get('int_menu_sub'));

        if ($this->fields->get('link_extern') && $this->fields->get('link_extern')->getFieldgroups()->count == 0) $this->fields->delete($this->fields->get('link_extern'));
        if ($this->fields->get('link_intern') && $this->fields->get('link_intern')->getFieldgroups()->count == 0) $this->fields->delete($this->fields->get('link_intern'));
        if ($this->fields->get('link_text') && $this->fields->get('link_text')->getFieldgroups()->count == 0) $this->fields->delete($this->fields->get('link_text'));
        if ($this->fields->get('link_aria') && $this->fields->get('link_aria')->getFieldgroups()->count == 0) $this->fields->delete($this->fields->get('link_aria'));
        if ($this->fields->get('link_description') && $this->fields->get('link_description')->getFieldgroups()->count == 0) $this->fields->delete($this->fields->get('link_description'));
        if ($this->fields->get('link_new_tab') && $this->fields->get('link_new_tab')->getFieldgroups()->count == 0) $this->fields->delete($this->fields->get('link_new_tab'));

        if ($this->fields->get('image') && $this->fields->get('image')->getFieldgroups()->count == 0) $this->fields->delete($this->fields->get('image'));

        if ($this->fields->get('select_menu_position') && $this->fields->get('select_menu_position')->getFieldgroups()->count == 0) $this->fields->delete($this->fields->get('select_menu_position'));
        if ($this->fields->get('select_menu_typ') && $this->fields->get('select_menu_typ')->getFieldgroups()->count == 0) $this->fields->delete($this->fields->get('select_menu_typ'));

        if ($this->fields->get('checkbox_menu_column') && $this->fields->get('checkbox_menu_column')->getFieldgroups()->count == 0) $this->fields->delete($this->fields->get('checkbox_menu_column'));
        if ($this->fields->get('checkbox_new_tab') && $this->fields->get('checkbox_new_tab')->getFieldgroups()->count == 0) $this->fields->delete($this->fields->get('checkbox_new_tab'));

        if ($this->fields->get('tab_menu') && $this->fields->get('tab_menu')->getFieldgroups()->count == 0) $this->fields->delete($this->fields->get('tab_menu'));
        if ($this->fields->get('tab_menu_END') && $this->fields->get('tab_menu_END')->getFieldgroups()->count == 0) $this->fields->delete($this->fields->get('tab_menu_END'));
    }

    /**
     * create fields function for the module
     *
     * @param $fields
     * @return void
     * @throws WirePermissionException
     */
    private function createFields($fields): void
    {
        /**
         * create the id fields for the repeater_menu
         */
        if(!$fields->get('int_menu')) {
            $field = new Field;
            $field->type = $this->modules->get('FieldtypeInteger');
            $field->name = "int_menu";
            $field->label = $this->_('Menü - ID');
            $field->icon = 'Calculator';
            $field->zeroNotEmpty = 0;
            $field->collapsed = 4;
            $field->inputType = 'text';
            $field->tags = 'integer';
            $field->columnWidth = 50;
            $field->save();
        }

        if(!$fields->get('int_menu_sub')) {
            $field = new Field;
            $field->type = $this->modules->get('FieldtypeInteger');
            $field->name = "int_menu_sub";
            $field->label = $this->_('Sub Menü - ID');
            $field->icon = 'Calculator';
            $field->zeroNotEmpty = 0;
            $field->collapsed = 4;
            $field->inputType = 'text';
            $field->tags = 'integer';
            $field->columnWidth = 50;
            $field->save();
        }

        /**
         * check / create text fields headline and link
         */
        if(!$fields->get('link_extern')) {
            $field = new Field;
            $field->type = $this->modules->get('FieldtypeText');
            $field->name = "link_extern";
            $field->label = $this->_('Link (extern)');
            $field->tags = 'links';
            $field->icon = 'Link';
            $field->columnWidth = 50;
            $field->save();
        }

        if(!$fields->get('link_text')) {
            $field = new Field;
            $field->type = $this->modules->get('FieldtypeText');
            $field->name = "link_text";
            $field->label = $this->_('Link Text');
            $field->tags = 'links';
            $field->icon = 'Link';
            $field->columnWidth = 50;
            $field->save();
        }

        if(!$fields->get('link_aria')) {
            $field = new Field;
            $field->type = $this->modules->get('FieldtypeText');
            $field->name = "link_aria";
            $field->label = $this->_('Link (aria-label)');
            $field->tags = 'links';
            $field->icon = 'Link';
            $field->columnWidth = 25;
            $field->save();
        }

        if(!$fields->get('link_description')) {
            $field = new Field;
            $field->type = $this->modules->get('FieldtypeTextarea');
            $field->name = "link_description";
            $field->label = $this->_('Link Zusatzbeschirftung');
            $field->tags = 'links';
            $field->icon = 'Link';
            $field->columnWidth = 50;
            $field->save();
        }

        /**
         *
         */
        if(!$fields->get('image')) {
            $crop_image =
                <<<EOT
                desktop,1920,1080
                tablet,1024,600
                mobile,600,600
                quadratisch,750,750
                EOT;

            $field = new Field;
            $field->type = $this->modules->get('FieldtypeCroppableImage3');
            $field->name = "image";
            $field->label = $this->_('Bild');
            $field->tags = 'images';
            $field->icon = 'File image o';
            $field->columnWidth = 50;
            $field->maxFiles = 1;
            $field->defaultValuePage = 0;
            $field->gridMode = 'list';
            $field->clientQuality = 90;
            $field->extensions = 'gif jpg jpeg png';
            $field->cropSetting = $crop_image;
            $field->inputfieldClass = 'InputfieldCroppableImage3';
            $field->save();

            $f = $fields->get('image');
            $f->save();
        }

        /**
         * tabs for the menu in the settings page
         */
        if(!$fields->get('tab_menu')) {
            $field = new Field;
            $field->type = $this->modules->get('FieldtypeFieldsetTabOpen');
            $field->name = "tab_menu";
            $field->label = $this->_('Menü Einstellungen');
            $field->tags = 'tabs';
            $field->icon = 'Tag';
            $field->save();
        }

        if(!$fields->get('tab_menu_END')) {
            $field = new Field;
            $field->type = $this->modules->get('FieldtypeFieldsetClose');
            $field->name = "tab_menu_END";
            $field->label = $this->_('Close an open fieldset');
            $field->tags = 'tabs';
            $field->icon = 'Tag';
            $field->save();
        }

        /**
         * create Select Options
         */
        if(!$fields->get('select_menu_position')) {
            $field = new Field;
            $field->type = $this->modules->get('FieldtypeOptions');
            $field->name = "select_menu_position";
            $field->label = $this->_('Menü Position');
            $field->tags = 'settings';
            $field->icon = 'Check square o';
            $field->columnWidth = 50;
            $field->save();

            $manager = new SelectableOptionManager();
            $options = '
                1=Header
                2=Footer
                ';
            $manager->setOptionsString($field, $options, false);

            $field->save();
        }

        if(!$fields->get('select_menu_typ')) {
            $field = new Field;
            $field->type = $this->modules->get('FieldtypeOptions');
            $field->name = "select_menu_typ";
            $field->label = $this->_('Menü Element Typ');
            $field->description = $this->_('Soll eine Verlinkung gesetzt werden oder einfach nur ein Menüelement?');
            $field->tags = 'settings';
            $field->icon = 'Check square o';
            $field->columnWidth = 100;
            $field->save();

            $manager = new SelectableOptionManager();
            $options = '
                1=Verlinkung
                2=Menüelement
                ';
            $manager->setOptionsString($field, $options, false);

            $field->save();
        }

        /**
         * create pagelist field für menu select
         */
        if(!$fields->get('link_intern')) {
            $field = new Field;
            $field->type = $this->modules->get('FieldtypePage');
            $field->name = "link_intern";
            $field->label = $this->_('Link (intern)');
            $field->tags = 'links';
            $field->icon = 'Link';
            $field->columnWidth = 50;
            $field->derefAsPage = 2;
            $field->inputfield = 'InputfieldPageListSelect';
            $field->parent_id = 0;
            $field->labelFieldName = 'title';
            $field->collapsed = 0;
            $field->save();
        }

        /**
         * create checkboxes for the module
         */
        if(!$fields->get('checkbox_menu_column')) {
            $field = new Field;
            $field->type = $this->modules->get('FieldtypeCheckbox');
            $field->name = "checkbox_menu_column";
            $field->label = $this->_('Menü vertikal?');
            $field->tags = 'settings';
            $field->icon = 'Check';
            $field->columnWidth = 50;
            $field->save();
        }

        if(!$fields->get('link_new_tab')) {
            $field = new Field;
            $field->type = $this->modules->get('FieldtypeCheckbox');
            $field->name = "link_new_tab";
            $field->label = $this->_('Im neuen Tab öffnen?');
            $field->tags = 'links';
            $field->icon = 'Link';
            $field->columnWidth = 25;
            $field->save();
        }

        /**
         * create Repeater for Menu - Items
         */
        if(!$fields->get('repeater_menu')) {
            $id_int_menu = $fields->get('int_menu')->id;
            $id_int_menu_sub = $fields->get('int_menu_sub')->id;
            $id_select_menu = $fields->get('select_menu_typ')->id;
            $id_image = $fields->get('image')->id;
            $id_link_description = $fields->get('link_description')->id;
            $id_link_intern = $fields->get('link_intern')->id;
            $id_link_extern = $fields->get('link_extern')->id;
            $id_link_text = $fields->get('link_text')->id;
            $id_link_aria = $fields->get('link_aria')->id;
            $id_link_new_tab = $fields->get('link_new_tab')->id;

            $field = new Field();
            $field->type = $this->modules->get("FieldtypeRepeater");
            $field->name = 'repeater_menu';
            $field->label = $this->_('Repeater (Menü)');
            $field->tags = 'repeater';
            $field->icon = 'repeat';
            $field->repeaterDepth = 3;
            $field->repeaterTitle = '{link_intern.title} {link_text}';
            $field->repeaterLoading = 1;

            $field->repeaterFields = array(
                0 => $id_int_menu,
                1 => $id_int_menu_sub,
                2 => $id_select_menu,
                3 => $id_link_description,
                4 => $id_image,
                5 => $id_link_intern,
                6 => $id_link_extern,
                7 => $id_link_text,
                8 => $id_link_aria,
                9 => $id_link_new_tab,
            );

            $field->save();

            $repeater = $fields->get('repeater_menu');

            $repeater_template = $repeater->type->getRepeaterTemplate($repeater);
            $repeater_template->fieldgroup->add('int_menu');
            $repeater_template->fieldgroup->add('int_menu_sub');
            $repeater_template->fieldgroup->add('select_menu_typ');
            $repeater_template->fieldgroup->add('image');
            $repeater_template->fieldgroup->add('link_description');
            $repeater_template->fieldgroup->add('link_intern');
            $repeater_template->fieldgroup->add('link_extern');
            $repeater_template->fieldgroup->add('link_text');
            $repeater_template->fieldgroup->add('link_aria');
            $repeater_template->fieldgroup->add('link_new_tab');


            /**
             * @TODO set showIf should be done by the installation but it overwrite the whole fieldsettings of a field
             *
             * $repeater_template->fieldgroup->get('image')->set('columnWidth', 50)->save();
             * $repeater_template->fieldgroup->get('image')->set('showIf', 'select_menu_typ=1')->save();
             * $this->fields->get('link_description')->set('showIf', 'select_menu_typ=1')->save();
             * $this->fields->get('link_intern')->set('showIf', 'select_menu_typ=1')->save();
             * $this->fields->get('link_extern')->set('showIf', 'select_menu_typ=1')->save();
             * $this->fields->get('link_new_tab')->set('columnWidth', 25)->save();
             * $this->fields->get('link_new_tab')->set('showIf', 'select_menu_typ=1')->save();
             * $this->fields->get('link_text')->set('columnWidth', 50)->save();
             *
             **/

            $repeater_template->fieldgroup->save();
            $repeater_template->save();
        }

        /**
         * matrix for the menu in the settings page
         */
        if(!$fields->get('matrix_menu')) {
            $id_matrix_type = $fields->get('repeater_matrix_type')->id;
            $id_select_field = $fields->get('select_menu_position')->id;
            $id_checkbox_menu = $fields->get('checkbox_menu_column')->id;
            $id_repeater_menu = $fields->get('repeater_menu')->id;

            $field = new Field();
            $field->type = $this->modules->get("FieldtypeRepeaterMatrix");
            $field->name = 'matrix_menu';
            $field->label = $this->_('Matrix (Menü)');
            $field->tags = 'matrix';
            $field->icon = 'Codepen';
            $field->addType = 1;
            $field->repeaterFields = array( 0 => $id_matrix_type, 1 => $id_select_field , 2 => $id_checkbox_menu, 3 => $id_repeater_menu );
            $field->matrix1_name = 'menu_element';
            $field->matrix1_label = 'Neues Menüelement';
            $field->matrix1_head = '{matrix_label} [• {matrix_summary}]';
            $field->matrix1_fields = array( 0 => $id_select_field , 1 => $id_checkbox_menu, 2 => $id_repeater_menu );
            $field->matrix1_sort = 0;
            $field->save();

            $repeater_matrix = $fields->get('matrix_menu');

            $repeater_matrix_template = $repeater_matrix->type->getMatrixTemplate($repeater_matrix);
            $repeater_matrix_template->fieldgroup->add('select_menu_position');
            $repeater_matrix_template->fieldgroup->add('checkbox_menu_column');
            $repeater_matrix_template->fieldgroup->add('repeater_menu');
            $repeater_matrix_template->fieldgroup->save();
            $repeater_matrix_template->save();
        }
    }

    /**
     * get an id for the menu items and sub menu
     *
     * @param HookEvent $event
     * @return void
     */
    public function saveMenuInt(HookEvent $event) :void
    {
        $page = $event->arguments(0);

        $id = $this->pages->get("template=options_generals")->id;

        if ($page->id === $id) {
            foreach ($page->matrix_menu as $matrix) {
                $i = 0;
                $j = 0;

                foreach ($matrix->repeater_menu as $key => $repeater) {
                    if ($repeater->depth === 0) {
                        $i++;
                    }

                    if ($repeater->depth === 1) {
                        $j = $key * 256;
                    }

                    $repeater->of(false);
                    $repeater->int_menu = $i;
                    $repeater->int_menu_sub = $j;
                    $repeater->save();
                }
            }
        }
    }

    /**
     * function to get an array from the repeater element inside the matrix
     *
     * @param RepeaterMatrixPageArray $menu_items
     * @param int $menu_position
     * @return string
     */
    public function renderMenu ( RepeaterMatrixPageArray $menu_items, int $menu_position = 0 ) : string
    {
        $menu           = [];
        $menu_sub       = [];
        $menu_sub_sub   = [];

        foreach ($menu_items as $item) {
            if (!$item->select_menu_position || $item->select_menu_position->id != $menu_position) {
                continue;
            }

            $position = $item->select_menu_position->title;

            if (!isset($menu[$position])) {
                $menu = [
                    'position' => $position,
                    'menu_elements' => [],
                ];
            }

            foreach ($item->repeater_menu as $menu_item) {
                $depth = $menu_item->depth;

                if ( $depth === 2 ) {
                    $menu_sub_sub_element = [
                        'url' => $menu_item->link_extern ?: $menu_item->link_intern->url,
                        'title' => $menu_item->link_text ?: $menu_item->link_intern->title,
                        'id' => $menu_item->link_intern->id,
                        'aria' => $menu_item->link_aria_label ?: $menu_item->link_intern->title,
                        'desc' => $menu_item->link_description ?: '',
                        'image' => ($menu_item->image) ? $menu_item->image->url : '',
                        'parent_id' => $menu_item->int_menu_sub,
                        'sub_menu_id' => $menu_item->int_menu_sub,
                    ];

                    $menu_sub_sub[] = $menu_sub_sub_element;
                }
            }

            foreach ($item->repeater_menu as $menu_item) {
                $depth = $menu_item->depth;

                if ( $depth === 1 ) {
                    $menu_sub_element = [
                        'url' => $menu_item->link_extern ?: $menu_item->link_intern->url,
                        'title' => $menu_item->link_text ?: $menu_item->link_intern->title,
                        'id' => $menu_item->link_intern->id,
                        'aria' => $menu_item->link_aria_label ?: $menu_item->link_intern->title,
                        'desc' => $menu_item->link_description ?: '',
                        'image' => ($menu_item->image) ? $menu_item->image->url : '',
                        'parent_id' => $menu_item->int_menu,
                        'sub_menu_id' => $menu_item->int_menu_sub,
                        'menu_sub_sub_elements' => [],
                    ];

                    foreach ( $menu_sub_sub AS $sub ) {
                        if ($sub['parent_id'] == $menu_item->int_menu_sub) {
                            $menu_sub_element['menu_sub_sub_elements'][] = $sub;
                        }
                    }

                    $menu_sub[] = $menu_sub_element;
                }
            }

            foreach ($item->repeater_menu as $menu_item) {
                $depth = $menu_item->depth;

                if ( $depth === 0 ) {
                    $menu_element = [
                        'url' => $menu_item->link_extern ?: $menu_item->link_intern->url,
                        'title' => $menu_item->link_text ?: $menu_item->link_intern->title,
                        'id' => $menu_item->link_intern->id,
                        'aria' => $menu_item->link_aria_label ?: $menu_item->link_intern->title,
                        'desc' => $menu_item->link_description ?: '',
                        'image' => ($menu_item->image) ? $menu_item->image->url : '',
                        'parent_id' => $menu_item->int_menu,
                        'menu_sub_elements' => [],
                    ];

                    foreach ( $menu_sub AS $sub ) {
                        if ($sub['parent_id'] == $menu_item->int_menu) {
                            $menu_element['menu_sub_elements'][] = $sub;
                        }
                    }

                    $menu['menu_elements'][] = $menu_element;
                }
            }
        }

        return json_encode($menu);
    }
}